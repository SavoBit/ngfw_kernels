Patch layout:
=============

"make patch" does 2 things:

  1. apply Untangle C patches (in patches/untangle)
  2. apply Untangle patches to the debian/ kernel build system (in
     patches/debian)

Note that at this point the Debian upstream patches are not applied
(see "Development" section above for that).

Dependencies:
=============

To make sure you have everything necessary:

  make deps

Debian packages:
================

To build arch-indep packages (headers, doc, src, etc):

  make kpkg-indep

To build arch-dep packages (actual kernel, modules):

  make kpkg-arch

To build both sets:

  make pkgs

Development:
============

Get a full tree, with all patches (Debian & Untangle), run once:

  make kpkg-arch

The tree then lives in:

  linux-4.9.30/debian/build/build_amd64_untangle_amd64

The beast approach is to transplant this somewhere else, and then set
it up as a git tree so you can track and later export the changes:

  cp -R linux-4.9.30/debian/build/build_amd64_untangle_amd64 /tmp/debian-4.9.30
  cd /tmp/debian-4.9.30
  git init
  git add -A
  git commit -m "Initial commit"

Then edit, commit, build (using "make bzImage && make modules").

Exporting patches back to the official tree:
============================================

Once done, a git diff between the initial commit and the last one is
what need to be brought back into the official tree.

Using git diff on each commit, and exporting those snippets to
individual files under patches/untangle, is the crude way to do it.

Using git format-patch <initialCommit..HEAD> is both easier and more
readable.

Whatever method you choose, please keep the new patches logically
grouped, and avoid at all costs dropping a big
"untangle_basediff.patch" in patches/untangle: doing this makes it
harder than it should when porting the Untangle patchet to a different
kernel.
