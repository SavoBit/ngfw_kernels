diff -urN linux-3.0.35.orig//include/linux/netfilter_ipv4.h linux-3.0.35//include/linux/netfilter_ipv4.h
--- linux-3.0.35.orig//include/linux/netfilter_ipv4.h	2014-01-24 11:33:37.000000000 -0800
+++ linux-3.0.35//include/linux/netfilter_ipv4.h	2014-01-24 11:34:05.000000000 -0800
@@ -63,7 +63,8 @@
 	NF_IP_PRI_SECURITY = 50,
 	NF_IP_PRI_NAT_SRC = 100,
 	NF_IP_PRI_SELINUX_LAST = 225,
-	NF_IP_PRI_CONNTRACK_CONFIRM = INT_MAX,
+	NF_IP_PRI_CONNTRACK_CONFIRM = INT_MAX - 10,
+	NF_IP_PRI_TUNE = INT_MAX - 5,
 	NF_IP_PRI_LAST = INT_MAX,
 };
 
diff -urN linux-3.0.35.orig//include/net/netns/ipv4.h linux-3.0.35//include/net/netns/ipv4.h
--- linux-3.0.35.orig//include/net/netns/ipv4.h	2014-01-24 11:33:37.000000000 -0800
+++ linux-3.0.35//include/net/netns/ipv4.h	2014-01-24 11:34:05.000000000 -0800
@@ -36,6 +36,7 @@
 	struct xt_table		*iptable_filter;
 	struct xt_table		*iptable_mangle;
 	struct xt_table		*iptable_raw;
+	struct xt_table		*iptable_tune;
 	struct xt_table		*arptable_filter;
 #ifdef CONFIG_SECURITY
 	struct xt_table		*iptable_security;
diff -urN linux-3.0.35.orig//net/ipv4/netfilter/iptable_tune.c linux-3.0.35//net/ipv4/netfilter/iptable_tune.c
--- linux-3.0.35.orig//net/ipv4/netfilter/iptable_tune.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.0.35//net/ipv4/netfilter/iptable_tune.c	2014-01-24 11:34:05.000000000 -0800
@@ -0,0 +1,139 @@
+/*
+ * 'tune' table, which is the last hooked in at POST_ROUTING and LOCAL_OUT .
+ *
+ * Copyright (C) 2003 Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
+ */
+#include <linux/module.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <net/ip.h>
+
+#define TUNE_VALID_HOOKS ((1 << NF_INET_POST_ROUTING) | (1 << NF_INET_LOCAL_OUT))
+
+static struct
+{
+	struct ipt_replace repl;
+	struct ipt_standard entries[2];
+	struct ipt_error term;
+} initial_table __initdata = {
+	.repl = {
+		.name = "tune",
+		.valid_hooks = TUNE_VALID_HOOKS,
+		.num_entries = 3,
+		.size = sizeof(struct ipt_standard) * 2 + sizeof(struct ipt_error),
+		.hook_entry = {
+			[NF_INET_POST_ROUTING] = 0,
+			[NF_INET_LOCAL_OUT] = sizeof(struct ipt_standard)
+		},
+		.underflow = {
+			[NF_INET_POST_ROUTING] = 0,
+			[NF_INET_LOCAL_OUT]  = sizeof(struct ipt_standard)
+		},
+	},
+	.entries = {
+		IPT_STANDARD_INIT(NF_ACCEPT),	/* PRE_ROUTING */
+		IPT_STANDARD_INIT(NF_ACCEPT),	/* LOCAL_OUT */
+	},
+	.term = IPT_ERROR_INIT,			/* ERROR */
+};
+
+static struct xt_table packet_tuner = {
+	.name = "tune",
+	.valid_hooks =  TUNE_VALID_HOOKS,
+	.me = THIS_MODULE,
+	.af = AF_INET,
+};
+
+/* The work comes in here from netfilter.c. */
+static unsigned int
+ipt_hook(unsigned int hook,
+	 struct sk_buff *skb,
+	 const struct net_device *in,
+	 const struct net_device *out,
+	 int (*okfn)(struct sk_buff *))
+{
+	return ipt_do_table(skb, hook, in, out, dev_net(out)->ipv4.iptable_tune);
+}
+
+static unsigned int
+ipt_local_hook(unsigned int hook,
+	       struct sk_buff *skb,
+	       const struct net_device *in,
+	       const struct net_device *out,
+	       int (*okfn)(struct sk_buff *))
+{
+	/* root is playing with raw sockets. */
+	if (skb->len < sizeof(struct iphdr) ||
+	    ip_hdrlen(skb) < sizeof(struct iphdr)) {
+		if (net_ratelimit())
+			printk("iptable_tune: ignoring short packet.\n");
+		return NF_ACCEPT;
+	}
+	return ipt_do_table(skb, hook, in, out, dev_net(out)->ipv4.iptable_tune);
+}
+
+static struct nf_hook_ops ipt_ops[] = {
+	{
+		.hook = ipt_hook,
+		.pf = PF_INET,
+		.hooknum = NF_INET_POST_ROUTING,
+		.priority = NF_IP_PRI_TUNE,
+		.owner = THIS_MODULE,
+	},
+	{
+		.hook = ipt_local_hook,
+		.pf = PF_INET,
+		.hooknum = NF_INET_LOCAL_OUT,
+		.priority = NF_IP_PRI_TUNE,
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __net_init iptable_tune_net_init(struct net *net)
+{
+	/* Register table */
+	net->ipv4.iptable_tune =
+		ipt_register_table(net, &packet_tuner, &initial_table.repl);
+	if (IS_ERR(net->ipv4.iptable_tune))
+		return PTR_ERR(net->ipv4.iptable_tune);
+	return 0;
+}
+
+static void __net_exit iptable_tune_net_exit(struct net *net)
+{
+	ipt_unregister_table(net, net->ipv4.iptable_tune);
+}
+
+static struct pernet_operations iptable_tune_net_ops = {
+	.init = iptable_tune_net_init,
+	.exit = iptable_tune_net_exit,
+};
+
+static int __init iptable_tune_init(void)
+{
+	int ret;
+
+	ret = register_pernet_subsys(&iptable_tune_net_ops);
+	if (ret < 0)
+		return ret;
+
+	/* Register hooks */
+	ret = nf_register_hooks(ipt_ops, ARRAY_SIZE(ipt_ops));
+	if (ret < 0)
+		goto cleanup_table;
+
+	return ret;
+
+ cleanup_table:
+	unregister_pernet_subsys(&iptable_tune_net_ops);
+	return ret;
+}
+
+static void __exit iptable_tune_fini(void)
+{
+        nf_unregister_hooks(ipt_ops, ARRAY_SIZE(ipt_ops));
+	unregister_pernet_subsys(&iptable_tune_net_ops);
+}
+
+module_init(iptable_tune_init);
+module_exit(iptable_tune_fini);
+MODULE_LICENSE("GPL");
diff -urN linux-3.0.35.orig//net/ipv4/netfilter/Kconfig linux-3.0.35//net/ipv4/netfilter/Kconfig
--- linux-3.0.35.orig//net/ipv4/netfilter/Kconfig	2014-01-24 11:33:39.000000000 -0800
+++ linux-3.0.35//net/ipv4/netfilter/Kconfig	2014-01-24 11:34:05.000000000 -0800
@@ -381,3 +381,15 @@
 
 endmenu
 
+# tune + specific targets
+config IP_NF_TUNE
+	tristate  'tune table support (adds a chain after POSTROUTING nat)'
+	depends on IP_NF_IPTABLES
+	help
+	  This option adds a `tune' table to iptables. This table is the very
+	  last in the netfilter framework and hooks in at the POSTROUTING
+	  chain.
+	
+	  If you want to compile it as a module, say M here and read
+	  <file:Documentation/modules.txt>.  If unsure, say `N'.
+
diff -urN linux-3.0.35.orig//net/ipv4/netfilter/Makefile linux-3.0.35//net/ipv4/netfilter/Makefile
--- linux-3.0.35.orig//net/ipv4/netfilter/Makefile	2014-01-24 11:33:39.000000000 -0800
+++ linux-3.0.35//net/ipv4/netfilter/Makefile	2014-01-24 11:34:05.000000000 -0800
@@ -45,6 +45,7 @@
 obj-$(CONFIG_IP_NF_MANGLE) += iptable_mangle.o
 obj-$(CONFIG_NF_NAT) += iptable_nat.o
 obj-$(CONFIG_IP_NF_RAW) += iptable_raw.o
+obj-$(CONFIG_IP_NF_TUNE) += iptable_tune.o
 obj-$(CONFIG_IP_NF_SECURITY) += iptable_security.o
 
 # matches
