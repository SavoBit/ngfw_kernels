diff -ruN linux-4.4.orig/drivers/net/bonding/bond_sysfs.c linux-4.4/drivers/net/bonding/bond_sysfs.c
--- linux-4.4.orig/drivers/net/bonding/bond_sysfs.c	2016-05-03 22:50:00.113773509 -0700
+++ linux-4.4/drivers/net/bonding/bond_sysfs.c	2016-05-03 23:08:08.466250336 -0700
@@ -193,12 +193,7 @@
 			res += sprintf(buf + res, "++more++ ");
 			break;
 		}
-		if (bond->params.mode == BOND_MODE_WEIGHTED_RR) {
-			res += sprintf(buf + res, "%s %d ", slave->dev->name,
-					slave->weight);
-		} else {
-			res += sprintf(buf + res, "%s ", slave->dev->name);
-		}
+		res += sprintf(buf + res, "%s ", slave->dev->name);
 	}
 
 	rtnl_unlock();
diff -ruN linux-4.4.orig/include/uapi/linux/if.h linux-4.4/include/uapi/linux/if.h
--- linux-4.4.orig/include/uapi/linux/if.h	2016-05-03 22:49:59.681766968 -0700
+++ linux-4.4/include/uapi/linux/if.h	2016-05-03 23:11:25.525233658 -0700
@@ -157,7 +157,7 @@
 };
 
 /*
- *	Device mapping structure. I'd just gone off and designed a 
+ *	Device mapping structure. I'd just gone off and designed a
  *	beautiful scheme using only loadable modules with arguments
  *	for driver options and along come the PCMCIA people 8)
  *
@@ -169,7 +169,7 @@
 struct ifmap {
 	unsigned long mem_start;
 	unsigned long mem_end;
-	unsigned short base_addr; 
+	unsigned short base_addr;
 	unsigned char irq;
 	unsigned char dma;
 	unsigned char port;
@@ -206,7 +206,7 @@
 	{
 		char	ifrn_name[IFNAMSIZ];		/* if name, e.g. "en0" */
 	} ifr_ifrn;
-	
+
 	union {
 		struct	sockaddr ifru_addr;
 		struct	sockaddr ifru_dstaddr;
@@ -221,10 +221,6 @@
 		char	ifru_newname[IFNAMSIZ];
 		void __user *	ifru_data;
 		struct	if_settings ifru_settings;
-		struct {
-			__u16 weight;
-			char slave[IFNAMSIZ];	
-		} ifru_weight;
 	} ifr_ifru;
 };
 
@@ -233,8 +229,6 @@
 #define	ifr_addr	ifr_ifru.ifru_addr	/* address		*/
 #define	ifr_dstaddr	ifr_ifru.ifru_dstaddr	/* other end of p-p lnk	*/
 #define	ifr_broadaddr	ifr_ifru.ifru_broadaddr	/* broadcast address	*/
-#define	ifr_weight_weight ifr_ifru.ifru_weight.weight /* bonding weight*/
-#define	ifr_weight_slave  ifr_ifru.ifru_weight.slave  /* bonding weight slave */
 #define	ifr_netmask	ifr_ifru.ifru_netmask	/* interface net mask	*/
 #define	ifr_flags	ifr_ifru.ifru_flags	/* flags		*/
 #define	ifr_metric	ifr_ifru.ifru_ivalue	/* metric		*/
