diff -ruN v3.14.orig/include/linux/in.h v3.14/include/linux/in.h
--- v3.14.orig/include/linux/in.h	2015-11-15 18:03:19.208833515 -0700
+++ v3.14/include/linux/in.h	2015-11-15 18:41:51.614999930 -0700
@@ -18,6 +18,12 @@
 #ifndef _LINUX_IN_H
 #define _LINUX_IN_H
 
+#include <linux/types.h>
+
+struct ip_sendnfmark_opts {
+    u32 on;
+    u32 mark;
+};
 
 #include <linux/errno.h>
 #include <uapi/linux/in.h>
diff -ruN v3.14.orig/include/net/ip.h v3.14/include/net/ip.h
--- v3.14.orig/include/net/ip.h	2015-11-15 18:03:19.200833454 -0700
+++ v3.14/include/net/ip.h	2015-11-15 18:41:51.614999930 -0700
@@ -38,6 +38,10 @@
 	struct ip_options	opt;		/* Compiled IP options		*/
 	unsigned char		flags;
 
+	/* Extensions */
+	unsigned char    pkt_ip_ttl;
+	unsigned char    pkt_ip_tos;
+
 #define IPSKB_FORWARDED		1
 #define IPSKB_XFRM_TUNNEL_SIZE	2
 #define IPSKB_XFRM_TRANSFORMED	4
@@ -56,6 +60,11 @@
 	__be32			addr;
 	int			oif;
 	struct ip_options_rcu	*opt;
+
+	/* Extensions */
+	u16 pkt_udp_sport;
+	u32 nfmark;
+
 	__u8			tx_flags;
 	__u8			ttl;
 	__s16			tos;
diff -ruN v3.14.orig/include/uapi/linux/in.h v3.14/include/uapi/linux/in.h
--- v3.14.orig/include/uapi/linux/in.h	2015-11-15 18:03:19.248833816 -0700
+++ v3.14/include/uapi/linux/in.h	2015-11-15 18:41:51.614999930 -0700
@@ -110,6 +110,10 @@
 #define IP_MINTTL       21
 #define IP_NODEFRAG     22
 
+/* Extensions */
+#define IP_SADDR	24
+#define IP_SENDNFMARK	25
+
 /* IP_MTU_DISCOVER values */
 #define IP_PMTUDISC_DONT		0	/* Never send DF frames */
 #define IP_PMTUDISC_WANT		1	/* Use per route hints	*/
diff -ruN v3.14.orig/include/uapi/linux/udp.h v3.14/include/uapi/linux/udp.h
--- v3.14.orig/include/uapi/linux/udp.h	2015-11-15 18:03:19.252833846 -0700
+++ v3.14/include/uapi/linux/udp.h	2015-11-15 18:41:51.614999930 -0700
@@ -30,6 +30,9 @@
 #define UDP_CORK	1	/* Never send partially complete segments */
 #define UDP_ENCAP	100	/* Set the socket to accept encapsulated packets */
 
+/* UDP ancillary data types */
+#define UDP_SPORT 1
+
 /* UDP encapsulation types */
 #define UDP_ENCAP_ESPINUDP_NON_IKE	1 /* draft-ietf-ipsec-nat-t-ike-00/01 */
 #define UDP_ENCAP_ESPINUDP	2 /* draft-ietf-ipsec-udp-encaps-06 */
diff -ruN v3.14.orig/net/ipv4/icmp.c v3.14/net/ipv4/icmp.c
--- v3.14.orig/net/ipv4/icmp.c	2015-11-15 18:03:19.284834087 -0700
+++ v3.14/net/ipv4/icmp.c	2015-11-15 18:41:51.614999930 -0700
@@ -347,6 +347,8 @@
 		return;
 	inet = inet_sk(sk);
 
+	memset(&ipc, 0, sizeof(ipc));
+
 	icmp_param->data.icmph.checksum = 0;
 
 	inet->tos = ip_hdr(skb)->tos;
@@ -615,6 +617,7 @@
 	icmp_param->offset = skb_network_offset(skb_in);
 	inet_sk(sk)->tos = tos;
 	sk->sk_mark = mark;
+       memset(&ipc, 0, sizeof(ipc));
 	ipc.addr = iph->saddr;
 	ipc.opt = &icmp_param->replyopts.opt;
 	ipc.tx_flags = 0;
diff -ruN v3.14.orig/net/ipv4/ip_output.c v3.14/net/ipv4/ip_output.c
--- v3.14.orig/net/ipv4/ip_output.c	2015-11-15 18:03:19.284834087 -0700
+++ v3.14/net/ipv4/ip_output.c	2015-11-15 18:41:51.618999963 -0700
@@ -140,11 +140,15 @@
 	iph->version  = 4;
 	iph->ihl      = 5;
 	iph->tos      = inet->tos;
+	if (IPCB(skb)->pkt_ip_tos) 
+		iph->tos = IPCB(skb)->pkt_ip_tos;
 	if (ip_dont_fragment(sk, &rt->dst))
 		iph->frag_off = htons(IP_DF);
 	else
 		iph->frag_off = 0;
 	iph->ttl      = ip_select_ttl(inet, &rt->dst);
+	if (IPCB(skb)->pkt_ip_ttl) 
+		iph->ttl = IPCB(skb)->pkt_ip_ttl;
 	iph->daddr    = (opt && opt->opt.srr ? opt->opt.faddr : daddr);
 	iph->saddr    = saddr;
 	iph->protocol = sk->sk_protocol;
@@ -156,7 +160,7 @@
 	}
 
 	skb->priority = sk->sk_priority;
-	skb->mark = sk->sk_mark;
+	skb->mark |= sk->sk_mark;
 
 	/* Send it out. */
 	return ip_local_out(skb);
@@ -390,7 +394,7 @@
 			     (skb_shinfo(skb)->gso_segs ?: 1) - 1);
 
 	skb->priority = sk->sk_priority;
-	skb->mark = sk->sk_mark;
+	skb->mark |= sk->sk_mark;
 
 	res = ip_local_out(skb);
 	rcu_read_unlock();
@@ -796,7 +800,7 @@
 			    struct page_frag *pfrag,
 			    int getfrag(void *from, char *to, int offset,
 					int len, int odd, struct sk_buff *skb),
-			    void *from, int length, int transhdrlen,
+			    void *from, int length, int transhdrlen, struct ipcm_cookie *ipc,
 			    unsigned int flags)
 {
 	struct inet_sock *inet = inet_sk(sk);
@@ -945,6 +949,18 @@
 						 fragheaderlen);
 			data += fragheaderlen + exthdrlen;
 
+			if (ipc->ttl)
+				IPCB(skb)->pkt_ip_ttl = ipc->ttl;
+			else 
+				IPCB(skb)->pkt_ip_ttl = 0;
+
+			if (ipc->tos)
+				IPCB(skb)->pkt_ip_ttl = ipc->tos;
+			else 
+				IPCB(skb)->pkt_ip_ttl = 0;
+
+			skb->mark = ipc->nfmark;
+            
 			if (fraggap) {
 				skb->csum = skb_copy_and_csum_bits(
 					skb_prev, maxfraglen,
@@ -1107,7 +1123,7 @@
 
 	return __ip_append_data(sk, fl4, &sk->sk_write_queue, &inet->cork.base,
 				sk_page_frag(sk), getfrag,
-				from, length, transhdrlen, flags);
+                            from, length, transhdrlen, ipc, flags);
 }
 
 ssize_t	ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
@@ -1346,7 +1362,7 @@
 	}
 
 	skb->priority = (cork->tos != -1) ? cork->priority: sk->sk_priority;
-	skb->mark = sk->sk_mark;
+	skb->mark |= sk->sk_mark;
 	/*
 	 * Steal rt from cork.dst to avoid a pair of atomic_inc/atomic_dec
 	 * on dst refcount
@@ -1436,7 +1452,7 @@
 
 	err = __ip_append_data(sk, fl4, &queue, &cork,
 			       &current->task_frag, getfrag,
-			       from, length, transhdrlen, flags);
+                           from, length, transhdrlen, ipc, flags);
 	if (err) {
 		__ip_flush_pending_frames(sk, &queue, &cork);
 		return ERR_PTR(err);
@@ -1492,6 +1508,7 @@
 	if (ip_options_echo(&replyopts.opt.opt, skb))
 		return;
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipc.addr = daddr;
 	ipc.opt = NULL;
 	ipc.tx_flags = 0;
diff -ruN v3.14.orig/net/ipv4/ip_sockglue.c v3.14/net/ipv4/ip_sockglue.c
--- v3.14.orig/net/ipv4/ip_sockglue.c	2015-11-15 18:03:19.284834087 -0700
+++ v3.14/net/ipv4/ip_sockglue.c	2015-11-15 18:41:51.618999963 -0700
@@ -231,6 +231,23 @@
 			ipc->tos = val;
 			ipc->priority = rt_tos2priority(ipc->tos);
 			break;
+                case IP_SADDR:
+                {
+                    struct in_addr *in;
+                    if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct in_addr))) 
+                        return -EINVAL;
+                    in = (struct in_addr *)CMSG_DATA(cmsg);
+                    ipc->addr = in->s_addr;
+                    break;
+                }
+
+                case IP_SENDNFMARK:
+                {
+                   if (cmsg->cmsg_len != CMSG_LEN(sizeof(u32))) 
+                       return -EINVAL;
+                   ipc->nfmark = *(u32 *)CMSG_DATA(cmsg);
+                   break;
+                }
 
 		default:
 			return -EINVAL;
@@ -593,6 +610,25 @@
 		else
 			inet->cmsg_flags &= ~IP_CMSG_ORIGDSTADDR;
 		break;
+
+	case IP_SENDNFMARK:
+	{
+		struct ip_sendnfmark_opts nfopt;
+
+		if (optlen != sizeof(struct ip_sendnfmark_opts))
+		    goto e_inval;
+		if (copy_from_user(&nfopt, optval, sizeof(struct ip_sendnfmark_opts))) {
+		    err = -EFAULT;
+		    break;
+		}
+		/* Changed semantics for version 2.6.32 and above -- reset to 0 when
+		not 'on' */
+		if (nfopt.on)
+		    sk->sk_mark = nfopt.mark;
+		else
+		    sk->sk_mark = 0;
+		break;
+	}
 	case IP_TOS:	/* This sets both TOS and Precedence */
 		if (sk->sk_type == SOCK_STREAM) {
 			val &= ~INET_ECN_MASK;
@@ -1196,6 +1232,23 @@
 	case IP_RECVORIGDSTADDR:
 		val = (inet->cmsg_flags & IP_CMSG_ORIGDSTADDR) != 0;
 		break;
+        case IP_SENDNFMARK:
+        {
+            struct ip_sendnfmark_opts opts;
+
+	    /* Changed semantics for version 2.6.32 and above -- always on */
+	    opts.on = 1;
+            opts.mark =  sk->sk_mark;
+	    release_sock(sk);
+            
+            if (len < sizeof(struct ip_sendnfmark_opts)) {
+                return -EINVAL;
+            }
+            if(copy_to_user(optval, &opts, sizeof(struct ip_sendnfmark_opts))) {
+                return -EFAULT;
+            }
+            return 0;
+        }
 	case IP_TOS:
 		val = inet->tos;
 		break;
diff -ruN v3.14.orig/net/ipv4/raw.c v3.14/net/ipv4/raw.c
--- v3.14.orig/net/ipv4/raw.c	2015-11-15 18:03:19.284834087 -0700
+++ v3.14/net/ipv4/raw.c	2015-11-15 18:41:51.618999963 -0700
@@ -516,6 +516,8 @@
 		daddr = inet->inet_daddr;
 	}
 
+	memset(&ipc, 0, sizeof(ipc));
+    
 	ipc.addr = inet->inet_saddr;
 	ipc.opt = NULL;
 	ipc.tx_flags = 0;
diff -ruN v3.14.orig/net/ipv4/udp.c v3.14/net/ipv4/udp.c
--- v3.14.orig/net/ipv4/udp.c	2015-11-15 18:03:19.284834087 -0700
+++ v3.14/net/ipv4/udp.c	2015-11-15 18:43:27.143750767 -0700
@@ -472,6 +472,33 @@
 	return result;
 }
 
+static int udp_cmsg_send(struct net *net, struct msghdr *msg, struct ipcm_cookie *ipc)
+{
+    struct cmsghdr *cmsg;
+
+    for (cmsg = CMSG_FIRSTHDR(msg); cmsg;
+         cmsg = CMSG_NXTHDR(msg, cmsg)) {
+
+        if (cmsg->cmsg_level == SOL_UDP) {
+            switch (cmsg->cmsg_type) {
+
+            case UDP_SPORT:
+                if (cmsg->cmsg_len != CMSG_LEN(sizeof(u_short)))
+                    return -EINVAL;
+                ipc->pkt_udp_sport = *(u_short*)CMSG_DATA(cmsg);
+                break;
+
+            default:
+                printk("Unknown cmsg_type: %i\n",cmsg->cmsg_type);
+                return -EINVAL;
+            }
+        }
+    }
+
+    return ip_cmsg_send(net,msg,ipc);
+}
+
+
 /* UDP is nearly always wildcards out the wazoo, it makes no sense to try
  * harder than this. -DaveM
  */
@@ -777,7 +804,8 @@
 	 * Create a UDP header
 	 */
 	uh = udp_hdr(skb);
-	uh->source = inet->inet_sport;
+	//uh->source = inet->inet_sport;
+        uh->source = fl4->fl4_sport;
 	uh->dest = fl4->fl4_dport;
 	uh->len = htons(len);
 	uh->check = 0;
@@ -855,7 +883,7 @@
 	int free = 0;
 	int connected = 0;
 	__be32 daddr, faddr, saddr;
-	__be16 dport;
+	__be16 dport, sport;
 	u8  tos;
 	int err, is_udplite = IS_UDPLITE(sk);
 	int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;
@@ -873,6 +901,7 @@
 	if (msg->msg_flags & MSG_OOB) /* Mirror BSD error message compatibility */
 		return -EOPNOTSUPP;
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipc.opt = NULL;
 	ipc.tx_flags = 0;
 	ipc.ttl = 0;
@@ -931,7 +960,7 @@
 	sock_tx_timestamp(sk, &ipc.tx_flags);
 
 	if (msg->msg_controllen) {
-		err = ip_cmsg_send(sock_net(sk), msg, &ipc);
+		err = udp_cmsg_send(sock_net(sk), msg, &ipc);
 		if (err)
 			return err;
 		if (ipc.opt)
@@ -951,6 +980,11 @@
 		rcu_read_unlock();
 	}
 
+    sport = inet->inet_sport;
+
+    if (ipc.pkt_udp_sport)
+        sport = ipc.pkt_udp_sport;
+
 	saddr = ipc.addr;
 	ipc.addr = faddr = daddr;
 
@@ -987,7 +1021,7 @@
 		flowi4_init_output(fl4, ipc.oif, sk->sk_mark, tos,
 				   RT_SCOPE_UNIVERSE, sk->sk_protocol,
 				   inet_sk_flowi_flags(sk),
-				   faddr, saddr, dport, inet->inet_sport,
+				   faddr, saddr, dport, sport,
 				   sock_i_uid(sk));
 
 		security_sk_classify_flow(sk, flowi4_to_flowi(fl4));
@@ -1044,7 +1078,7 @@
 	fl4->daddr = daddr;
 	fl4->saddr = saddr;
 	fl4->fl4_dport = dport;
-	fl4->fl4_sport = inet->inet_sport;
+	fl4->fl4_sport = sport;
 	up->pending = AF_INET;
 
 do_append_data:
