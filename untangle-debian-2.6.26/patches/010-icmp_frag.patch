Index: source_i386_untangle/include/linux/sysctl.h
===================================================================
--- source_i386_untangle.orig/include/linux/sysctl.h	2008-10-03 15:44:28.000000000 -0700
+++ source_i386_untangle/include/linux/sysctl.h	2008-10-03 15:47:57.000000000 -0700
@@ -435,6 +435,7 @@
 	NET_TCP_ALLOWED_CONG_CONTROL=123,
 	NET_TCP_MAX_SSTHRESH=124,
 	NET_TCP_FRTO_RESPONSE=125,
+	NET_IPV4_ICMP_FRAG_ACCEPT,
 };
 
 enum {
Index: source_i386_untangle/net/ipv4/netfilter/Kconfig
===================================================================
--- source_i386_untangle.orig/net/ipv4/netfilter/Kconfig	2008-10-03 15:44:28.000000000 -0700
+++ source_i386_untangle/net/ipv4/netfilter/Kconfig	2008-10-03 15:50:35.000000000 -0700
@@ -31,6 +31,14 @@
 
 	  If unsure, say Y.
 
+config IP_NF_FRAG_ACCEPT
+	tristate "ICMP UDP Fragmentation Accept"
+	help
+	  Accept all ICMP UDP Fragmentation requests dependent upon
+	  /proc/sys/net/ipv4/icmp_frag_accept
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config IP_NF_QUEUE
 	tristate "IP Userspace queueing via NETLINK (OBSOLETE)"
 	depends on NETFILTER_ADVANCED
Index: source_i386_untangle/net/ipv4/netfilter/Makefile
===================================================================
--- source_i386_untangle.orig/net/ipv4/netfilter/Makefile	2008-10-03 15:44:28.000000000 -0700
+++ source_i386_untangle/net/ipv4/netfilter/Makefile	2008-10-03 15:50:35.000000000 -0700
@@ -13,6 +13,9 @@
 nf_nat-objs		:= nf_nat_core.o nf_nat_helper.o nf_nat_proto_unknown.o nf_nat_proto_common.o nf_nat_proto_tcp.o nf_nat_proto_udp.o nf_nat_proto_icmp.o
 iptable_nat-objs	:= nf_nat_rule.o nf_nat_standalone.o
 
+# icmp udp fragmentation accept
+obj-$(CONFIG_IP_NF_FRAG_ACCEPT) += ip_frag_accept.o
+
 # connection tracking
 obj-$(CONFIG_NF_CONNTRACK_IPV4) += nf_conntrack_ipv4.o
 
Index: source_i386_untangle/net/ipv4/netfilter/ip_frag_accept.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ source_i386_untangle/net/ipv4/netfilter/ip_frag_accept.c	2008-10-03 16:09:26.000000000 -0700
@@ -0,0 +1,112 @@
+#include <linux/types.h>
+#include <linux/ip.h>
+#include <linux/in.h>
+#include <linux/netfilter.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/proc_fs.h>
+#include <linux/version.h>
+#include <net/checksum.h>
+#include <net/icmp.h>
+
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Original Author Unknown");
+MODULE_DESCRIPTION("ICMP UDP fragmentation needed accept");
+
+int sysctl_icmp_frag_accept;
+
+static unsigned int icmp_frag_in(unsigned int hooknum,
+                                    struct sk_buff *skb,
+                                    const struct net_device *in,
+                                    const struct net_device *out,
+                                    int (*okfn)(struct sk_buff *))
+{
+    int ihl;
+    ihl = ip_hdr(skb)->ihl*4;
+    if (sysctl_icmp_frag_accept && ip_hdr(skb)->protocol == IPPROTO_ICMP) {
+#define ICMP_HDR_SIZE 8 /* 4 plus 4 unused */
+        /*size of icmp payload */
+	__u32 len = ntohs(ip_hdr(skb)->tot_len) - ihl - ICMP_HDR_SIZE; 
+        struct icmphdr *icmph = icmp_hdr(skb);
+
+        if (!pskb_may_pull(skb, ihl+8))
+            return NF_ACCEPT;
+
+        if ((icmph->type == 3 && icmph->code == 4 )) /* fragmentation needed */
+        {
+        
+            if (len >= sizeof(struct iphdr)) {
+                struct iphdr* innerh = (struct iphdr*)(skb_transport_header(skb) + ICMP_HDR_SIZE);
+                int innerhl = innerh->ihl*4;
+
+                /* is udp/tcp and has source/dest ports */
+		/* fix for bug 920 -- the router giving us the ICMP message
+		 * may only give us the first 8 bytes of the tcp header,
+		 * which since it has the source/dest ports, is all we need. */
+
+                if ((innerh->protocol == IPPROTO_UDP) && len >= (innerhl + 8)) {
+
+		    if (innerh->protocol == IPPROTO_UDP) {
+                                struct iphdr *iph = innerh;
+				u32 info;
+				struct net *net;
+				if (skb->dst != NULL)
+				    net = dev_net(skb->dst->dev);
+				else
+				    net = dev_net(skb->dev);
+				info = ip_rt_frag_needed(net, iph,
+							 ntohs(icmph->un.frag.mtu),
+							 skb->dev);
+                                return NF_DROP;
+		    }
+                }
+            }
+        }
+    }
+
+    return NF_ACCEPT;
+}
+
+static struct nf_hook_ops icmp_frag_ops = {
+	.hook		= icmp_frag_in,
+	.owner		= THIS_MODULE,
+	.pf  		= PF_INET,
+	.hooknum	= NF_INET_PRE_ROUTING,
+	.priority	= NF_IP_PRI_FIRST+2,
+};
+
+static int init_or_cleanup(int init)
+{
+	int ret = 0;
+
+	if (!init) 
+        goto cleanup;
+
+	ret = nf_register_hook(&icmp_frag_ops);
+	if (ret < 0) {
+		printk("icmp_frag: can't register pre-routing hook.\n");
+		goto cleanup;
+	}
+
+	return ret;
+
+ cleanup:
+	nf_unregister_hook(&icmp_frag_ops);
+	return ret;
+}
+
+static int __init init(void)
+{
+	return init_or_cleanup(1);
+}
+
+static void __exit fini(void)
+{
+	init_or_cleanup(0);
+}
+
+module_init(init);
+module_exit(fini);
+
Index: source_i386_untangle/net/ipv4/sysctl_net_ipv4.c
===================================================================
--- source_i386_untangle.orig/net/ipv4/sysctl_net_ipv4.c	2008-10-03 15:44:28.000000000 -0700
+++ source_i386_untangle/net/ipv4/sysctl_net_ipv4.c	2008-10-03 15:47:57.000000000 -0700
@@ -23,6 +23,7 @@
 #include <net/cipso_ipv4.h>
 #include <net/inet_frag.h>
 
+extern int sysctl_icmp_frag_accept;
 static int zero;
 static int tcp_retr1_max = 255;
 static int ip_local_port_range_min[] = { 1, 1 };
@@ -422,6 +423,14 @@
 
 #endif
 	{
+		.ctl_name	= NET_IPV4_ICMP_FRAG_ACCEPT,
+		.procname	= "icmp_frag_accept",
+		.data		= &sysctl_icmp_frag_accept,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
 		.ctl_name	= NET_IPV4_IGMP_MAX_MSF,
 		.procname	= "igmp_max_msf",
 		.data		= &sysctl_igmp_max_msf,
Index: source_i386_untangle/kernel/sysctl_check.c
===================================================================
--- source_i386_untangle.orig/kernel/sysctl_check.c	2008-10-03 15:44:28.000000000 -0700
+++ source_i386_untangle/kernel/sysctl_check.c	2008-10-03 15:47:57.000000000 -0700
@@ -389,6 +389,7 @@
 	{ NET_TCP_ALLOWED_CONG_CONTROL,		"tcp_allowed_congestion_control" },
 	{ NET_TCP_MAX_SSTHRESH,			"tcp_max_ssthresh" },
 	{ NET_TCP_FRTO_RESPONSE,		"tcp_frto_response" },
+	{ NET_IPV4_ICMP_FRAG_ACCEPT,		"icmp_frag_accept" },
 	{ 2088 /* NET_IPQ_QMAX */,		"ip_queue_maxlen" },
 	{}
 };
